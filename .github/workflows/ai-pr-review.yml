name: AI PR Review

on:
  pull_request:
    types: [opened, reopened, synchronize]

permissions:
  contents: read          # read the code
  pull-requests: write    # write a comment

jobs:
  review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Generate PR diff via GitHub CLI
        id: diff
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr diff ${{ github.event.pull_request.number }} > pr.diff

      - name: Send diff to ChatGPT (o4‑mini)
        id: chat
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          jq -n --rawfile diff pr.diff '
          {
            model: "o4-mini",
            reasoning: { effort: "medium" },
            input: [
              { role: "system", content: "<instructions> You are a seasoned code reviewer. - Review PR focusing on critical flaws, potential bugs and issues, clean code, observability of the code to easily trace the flows, logging, and coding best practices (given language and framework). </instructions> <response_format> Use markdown tags (without initial markdown tag), use a checkbox list to easily mark the fixed findings </response_format>" },
              { role: "user", content: "<pr_diff>\($diff)</pr_diff>"}
            ]
          }' > request.json
      
          # 2) Call /v1/responses and capture full response
          HTTP_CODE=$(curl -sS -w "%{http_code}" -o response.json \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            https://api.openai.com/v1/responses \
            --data-binary @request.json)

          echo "OpenAI Responses API HTTP $HTTP_CODE"
          echo "Full response:" >&2
          jq '.' response.json >&2

          # 3) Fail on any API error
          if jq -e '.error' response.json > /dev/null; then
            echo "::error::OpenAI API error: $(jq -r '.error.message' response.json)"
            exit 1
          fi

          # 4) Extract textual output from the `output` array
          jq -r '
            # Find all output items with text content
            [.output[]
              | if (has("content") and (.content | type == "string")) then .content
                elif (has("content") and (.content | type == "array")) then (.content[] | .text? // empty)
                else empty end
            ]
            # Join different segments with two newlines
            | join("\n\n")
          ' response.json > review.md

      - name: Publish PR comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
            -f body="$(cat review.md)"
